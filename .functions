#!/bin/bash
#* Bash Functions that can be used globally in the OS



# SOURCE: https://github.com/evilcrash/dotfiles/blob/main/.functions
# Lists all files, long format, colorized, permissions in octal
function la(){
 	ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}


# Pushes local changes to git remote
#* @params: $1 = git branch, $2 = git message
gitPush()
{
  # Sets command line arguments to respective variables
  branch=$1
  message=$2


  # If branch is null, prompts user to enter branch
  if [ -z $branch ]
  then
      echo "Enter Git Branch"
      read branch
  fi


  # If message is null, prompts user to enter message
  if [ -z $message ]
  then
      echo "Enter Commit Message"
      read message
  fi


  git add -A
  git commit -m "$message"
  git push -u origin $branch
  echo "done"
}


# Merges local git branch to another, then pushes that branch to remote. Assumes user already pushed changes to willMergeBranch.
#! Has not been tested yet

#* @param willMergeBranch || The branch that will merge into another branch
#* @param willBeMergedBranch  || The branch that will be merged into.
gitMerge()
{
  # Sets command line arguments to respective variables
  willMergeBranch=$1
  willBeMergedBranch=$2


  # If willMergeBranch is null, prompts user to enter branch
  if [ -z $willMergeBranch ]
  then
      echo "Enter Branch that will merge to another branch"
      read willMergeBranch
  fi


  # If willBeMergedBranch is null, prompts user to enter message
  if [ -z $willBeMergedBranch ]
  then
      echo "Enter Branch that will be merged into"
      read willBeMergedBranch
  fi 


  git checkout $willBeMergedBranch
  git merge $willMergeBranch
  git push -u origin $willMergeBranch
  echo "done"
}

